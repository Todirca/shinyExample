x2 = seq(2, 8, 1),
y1 = rep(0, 7),
y2 = rep(1, 7))
dataSRI[5, c("x1", "x2", "y1", "y2")] <- dataSRI[5, c("x1", "x2", "y1", "y2")] + c(-.1, .1)
dataSRI[nrow(dataSRI) + 1,]           <- dataSRI[5,]
dataSRI                               <- dataSRI[-5,]
colorFill    <- c("#ffffff", "#3a3263")
SRIPlot <- ggplot(data = dataSRI) +
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = SRISelect), color = "black") +
scale_fill_manual(values = colorFill) +
geom_text(data=dataSRI, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=SRI), size=sizeSRI, color = colorSRI) +
theme_void() +
theme(legend.position = "none")
SRIPlot
library(ggplot2)
plotSRI <- function(SRILevel, colorFill){
tempSRI    <- rep("a", 7)
tempSRI[SRILevel] <- "b"
sizeSRI    <- rep(7, 7)
sizeSRI[7] <- 10
colorSRI    <- rep("black", 7)
colorSRI[7] <- "white"
dataSRI    <- data.frame(SRI = seq(1, 7, 1),
SRISelect = tempSRI,
x1 = seq(1, 7, 1),
x2 = seq(2, 8, 1),
y1 = rep(0, 7),
y2 = rep(1, 7))
dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] <- dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] + c(-.1, .1)
dataSRI[nrow(dataSRI) + 1,]           <- dataSRI[SRILevel,]
dataSRI                               <- dataSRI[-SRILevel,]
colorFill    <- c("#ffffff", colorFill)
SRIPlot <- ggplot(data = dataSRI) +
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = SRISelect), color = "black") +
scale_fill_manual(values = colorFill) +
geom_text(data=dataSRI, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=SRI), size=sizeSRI, color = colorSRI) +
theme_void() +
theme(legend.position = "none")
return(SRIPlot)
}
plotSRI(3, "#3a3263")
plotSRI(4, "#3a3263")
plotSRI(5, "#3a3263")
plotSRI(6, "#3a3263")
library(ggplot2)
plotSRI <- function(SRILevel, colorFill){
tempSRI    <- rep("a", 7)
tempSRI[SRILevel] <- "b"
sizeSRI    <- rep(7, 7)
sizeSRI[7] <- 10
colorSRI    <- rep("black", 7)
colorSRI[7] <- "white"
dataSRI    <- data.frame(SRI = seq(1, 7, 1),
SRISelect = tempSRI,
x1 = seq(1, 7, 1),
x2 = seq(2, 8, 1),
y1 = rep(0, 7),
y2 = rep(1, 7))
dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] <- dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] + c(-.1, .1)
dataSRI[nrow(dataSRI) + 1,]           <- dataSRI[SRILevel,]
dataSRI                               <- dataSRI[-SRILevel,]
colorFill    <- c("#ffffff", colorFill)
SRIPlot <- ggplot(data = dataSRI) +
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = SRISelect), color = "black") +
scale_fill_manual(values = colorFill) +
geom_text(data=dataSRI, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=SRI), size=sizeSRI, color = colorSRI) +
theme_void() +
theme(legend.position = "none")
return(SRIPlot)
}
plotSRI(3, "#3a3263")
plotSRI(4, "#3a3263")
plotSRI(5, "#3a3263")
plotSRI(6, "#3a3443")
library(ggplot2)
plotSRI <- function(SRILevel, colorFill){
tempSRI    <- rep("a", 7)
tempSRI[SRILevel] <- "b"
sizeSRI    <- rep(7, 7)
sizeSRI[7] <- 10
colorSRI    <- rep("black", 7)
colorSRI[7] <- "white"
dataSRI    <- data.frame(SRI = seq(1, 7, 1),
SRISelect = tempSRI,
x1 = seq(1, 7, 1),
x2 = seq(2, 8, 1),
y1 = rep(0, 7),
y2 = rep(1, 7))
dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] <- dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] + c(-.1, .1)
dataSRI[nrow(dataSRI) + 1,]                  <- dataSRI[SRILevel,]
dataSRI                                      <- dataSRI[-SRILevel,]
colorFill    <- c("#ffffff", colorFill)
SRIPlot <- ggplot(data = dataSRI) +
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = SRISelect), color = "black") +
scale_fill_manual(values = colorFill) +
geom_text(data=dataSRI, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=SRI), size=sizeSRI, color = colorSRI) +
theme_void() +
theme(legend.position = "none")
return(SRIPlot)
}
plotSRI(3, "#3a3263")
plotSRI(4, "#3a3263")
plotSRI(5, "#3a3263")
plotSRI(6, "#3a3263")
library(ggplot2)
plotSRI <- function(SRILevel, colorFill){
tempSRI    <- rep("a", 7)
tempSRI[SRILevel] <- "b"
sizeSRI    <- rep(7, 7)
sizeSRI[7] <- 10
colorSRI    <- rep("black", 7)
colorSRI[7] <- "white"
dataSRI    <- data.frame(SRI = seq(1, 7, 1),
SRISelect = tempSRI,
x1 = seq(1, 7, 1),
x2 = seq(2, 8, 1),
y1 = rep(0, 7),
y2 = rep(1, 7))
dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] <- dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] + c(-.1, .1)
dataSRI[nrow(dataSRI) + 1,]                  <- dataSRI[SRILevel,]
dataSRI                                      <- dataSRI[-SRILevel,]
colorFill    <- c("#eeeeee", colorFill)
SRIPlot <- ggplot(data = dataSRI) +
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = SRISelect), color = "black") +
scale_fill_manual(values = colorFill) +
geom_text(data=dataSRI, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=SRI), size=sizeSRI, color = colorSRI) +
theme_void() +
theme(legend.position = "none")
return(SRIPlot)
}
plotSRI(3, "#3a3263")
plotSRI(4, "#3a3263")
plotSRI(5, "#3a3263")
plotSRI(6, "#3a3263")
library(ggplot2)
plotSRI <- function(SRILevel, colorFill){
tempSRI    <- rep("a", 7)
tempSRI[SRILevel] <- "b"
sizeSRI    <- rep(7, 7)
sizeSRI[7] <- 10
colorSRI    <- rep("black", 7)
colorSRI[7] <- "white"
dataSRI    <- data.frame(SRI = seq(1, 7, 1),
SRISelect = tempSRI,
x1 = seq(1, 7, 1),
x2 = seq(2, 8, 1),
y1 = rep(0, 7),
y2 = rep(1, 7))
dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] <- dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] + c(-.1, .1)
dataSRI[nrow(dataSRI) + 1,]                  <- dataSRI[SRILevel,]
dataSRI                                      <- dataSRI[-SRILevel,]
colorFill    <- c("#fff", colorFill)
SRIPlot <- ggplot(data = dataSRI) +
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = SRISelect), color = "black") +
scale_fill_manual(values = colorFill) +
geom_text(data=dataSRI, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=SRI), size=sizeSRI, color = colorSRI) +
theme_void() +
theme(legend.position = "none")
return(SRIPlot)
}
plotSRI(3, "#3a3263")
plotSRI(4, "#3a3263")
plotSRI(5, "#3a3263")
plotSRI(6, "#3a3263")
library(ggplot2)
plotSRI <- function(SRILevel, colorFill){
tempSRI    <- rep("a", 7)
tempSRI[SRILevel] <- "b"
sizeSRI    <- rep(7, 7)
sizeSRI[7] <- 10
colorSRI    <- rep("black", 7)
colorSRI[7] <- "white"
dataSRI    <- data.frame(SRI = seq(1, 7, 1),
SRISelect = tempSRI,
x1 = seq(1, 7, 1),
x2 = seq(2, 8, 1),
y1 = rep(0, 7),
y2 = rep(1, 7))
dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] <- dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] + c(-.1, .1)
dataSRI[nrow(dataSRI) + 1,]                  <- dataSRI[SRILevel,]
dataSRI                                      <- dataSRI[-SRILevel,]
colorFill    <- c("#ffffff", colorFill)
SRIPlot <- ggplot(data = dataSRI) +
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = SRISelect), color = "black") +
scale_fill_manual(values = colorFill) +
geom_text(data=dataSRI, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=SRI), size=sizeSRI, color = colorSRI) +
theme_void() +
theme(legend.position = "none")
return(SRIPlot)
}
plotSRI(3, "#3a3263")
plotSRI(4, "#3a3263")
plotSRI(5, "#3a3263")
plotSRI(6, "#3a3263")
library(ggplot2)
plotSRI <- function(SRILevel, colorFill){
tempSRI    <- rep("a", 7)
tempSRI[SRILevel] <- "b"
sizeSRI    <- rep(7, 7)
sizeSRI[7] <- 10
colorSRI    <- rep("black", 7)
colorSRI[7] <- "white"
dataSRI    <- data.frame(SRI = seq(1, 7, 1),
SRISelect = tempSRI,
x1 = seq(1, 7, 1),
x2 = seq(2, 8, 1),
y1 = rep(0, 7),
y2 = rep(1, 7))
dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] <- dataSRI[SRILevel, c("x1", "x2", "y1", "y2")] + c(-.1, .1)
dataSRI[nrow(dataSRI) + 1,]                  <- dataSRI[SRILevel,]
dataSRI                                      <- dataSRI[-SRILevel,]
colorFill    <- c("#ffffff", colorFill)
SRIPlot <- ggplot(data = dataSRI) +
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = SRISelect), color = "black") +
scale_fill_manual(values = colorFill) +
geom_text(data=dataSRI, aes(x=x1+(x2-x1)/2, y=y1+(y2-y1)/2, label=SRI), size=sizeSRI, color = colorSRI) +
theme_void() +
theme(legend.position = "none")
return(SRIPlot)
}
plotSRI(3, "#3a3263")
plotSRI(4, "#3a3263")
plotSRI(5, "#3a3263")
plotSRI(6, "#3a3263")
install.packages("quantmod")
library(quantmod)
?getSymbolLookup
?getSymbols
shiny::runApp('Documents/Github/Findthetool/apps/factsheet/app')
shiny::runApp('Documents/Github/Findthetool/apps/judo')
install.packages("shinyjs")
runApp('Documents/Github/Findthetool/apps/judo')
shiny::runApp('Documents/Github/Findthetool/apps/judo')
runApp('Documents/Github/Findthetool/apps/judo')
runApp('Documents/Github/Findthetool/apps/judo')
runApp('Documents/Github/Findthetool/apps/judo')
runApp('Documents/Github/Findthetool/apps/judo')
# ================================================================================================================================================
# Judo Cares, first Prototype
# Interface globale
# July 2019
# Jérémy Dudek
# ================================================================================================================================================
output$uiCond <- renderUI({
list(
navbarPage(id = "inTabset",
"Judo - CARES",
tabPanel("Portfolio",
list(
tags$div(class = "divPage",
h2("Your portfolio", style = "margin-bottom:0px;"),
tags$div(class = "divBox",
fluidRow(
column(4, fileInput("csvPort", NULL, multiple = F, accept = ".csv"))
)
),
tags$div(class = "divBox",
fluidRow(
column(4, p("TEST")),
column(4, p("TEST2"))
)
)
)
)
)
)
)
})
# ================================================================================================================================================
# Judo Cares, first Prototype
# Interface globale
# July 2019
# Jérémy Dudek
# ================================================================================================================================================
output$uiCond <- renderUI({
list(
navbarPage(id = "inTabset",
"Judo - CARES",
tabPanel("Portfolio",
list(
tags$div(class = "divPage",
h2("Your portfolio", style = "margin-bottom:0px;"),
actionButton("loadPort","Load your Portfolio"),
tags$div(class = "divBox",
h3("Detailed Portfolio"),
uiOutput("thePort")
)
)
)
),
tabPanel("`results",
list(
tags$div(class = "divPage",
p("Test")
)
)
),
tabPanel("History",
list(
tags$div(class = "divPage",
p("Test")
)
)
)
)
)
})
library(quantmod)
getQuote("FR0000120644")
library(quantmod)
getQuote("FR0000120644", src="yahoo")
library(quantmod)
getQuote("BN.PA", src="yahoo")
library(quantmod)
getQuote("BN.PA", src="yahoo",what=yahooQF("Last"))
library(quantmod)
getQuote("BN.PA", src="yahoo",what=yahooQF(c("Last")))
library(quantmod)
getQuote("BN.PA", src="yahoo")
library(quantmod)
getQuote("BN.PA", src="yahoo")["Last"]
getSymbolLookup("FR0000120644")
getSymbolLookup("Danone")
allSym <- stockSymbols()
View(allSym)
grep("BN", allSym[,1])
allSym[grep("BN", allSym[,1]), 1]
runApp('Documents/Github/Findthetool/apps/judo')
runApp('Documents/Github/Findthetool/apps/judo')
tempPort
runApp('Documents/Github/Findthetool/apps/judo')
runApp('Documents/Github/Findthetool/apps/judo')
motDePasse <- "judoCares!20180805"
library(openssl)
key <- sha256(motDePasse)
saveRDS(key, "credentialsJudo.rds")
getwd()
x           <- serialize(list(1,2,3), NULL)
key         <- readRDS("Users/jeremy/credentialsJudo.rds")
encrypted_x <- aes_cbc_encrypt(x, key = key)
x           <- serialize(list(1,2,3), NULL)
key         <- readRDS("/Users/jeremy/credentialsJudo.rds")
encrypted_x <- aes_cbc_encrypt(x, key = key)
library(openssl)
x           <- serialize(list(1,2,3), NULL)
key         <- readRDS("/Users/jeremy/credentialsJudo.rds")
encrypted_x <- aes_cbc_encrypt(x, key = key)
x           <- serialize(list(1,2,3), NULL)
x
list(1,2,3)
list(1,2,3)
serialize(list(1,2,3), NULL)
x           <- serialize(list(1,2,3), NULL)
key         <- readRDS("/Users/jeremy/credentialsJudo.rds")
encrypted_x <- aes_cbc_encrypt(x, key = key)
library(openssl)
x           <- serialize(list(1,2,3), NULL)
key         <- readRDS("/Users/jeremy/credentialsJudo.rds")
encrypted_x <- aes_cbc_encrypt(x, key = key)
encrypted_x <- aes_cbc_encrypt(x, key = key)
key
library(openssl)
x <- serialize(list(1,2,3), NULL)
passphrase <- charToRaw("This is super secret")
key <- sha256(passphrase)
encrypted_x <- aes_cbc_encrypt(x, key = key)
saveRDS(encrypted_x, "secret-x.rds")
encrypted_y <- readRDS("secret-x.rds")
y <- unserialize(aes_cbc_decrypt(encrypted_y, key = key))
x <- serialize(list(1,2,3), NULL)
passphrase <- charToRaw("This is super secret")
key <- sha256(passphrase)
key
motDePasse <- charToRaw("judoCares!20180805")
key <- sha256(motDePasse)
key
saveRDS(key, "credentialsJudo.rds")
library(openssl)
x           <- serialize(list(1,2,3), NULL)
key         <- readRDS("/Users/jeremy/credentialsJudo.rds")
encrypted_x <- aes_cbc_encrypt(x, key = key)
saveRDS(encrypted_x, "secret-x.rds")
encrypted_y <- readRDS("secret-x.rds")
encrypted_y
y <- unserialize(aes_cbc_decrypt(encrypted_y, key = key))
y
install.packages("aws.s3")
library(aws.s3)
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAIQXECCYJBGMVO2YQ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "eu-central-1")
put_object(file = "secret-x.rds",
object = "/testFolder/secret-x.rds",
bucket = "judo-cares")
awsCred <- list()
awsCred[["AWS_ACCESS_KEY_ID"]]     <- "AKIAIQXECCYJBGMVO2YQ"
awsCred[["AWS_SECRET_ACCESS_KEY"]] <- "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"
awsCred[["AWS_DEFAULT_REGION"]]    <- "eu-central-1"
saveRDS(awsCred, "credS3Judo.rds")
Sys.getenv("HOME")
library(aws.s3)
credAWS <- readRDS(file = paste0(Sys.getenv("HOME"),"/credS3judo.rds"))
do.call(Sys.setenv, credAWS)
put_object(file = "secret-x.rds",
object = "/testFolder/secret-x.rds",
bucket = "judo-cares")
shiny::runApp('Documents/Github/Findthetool/apps/judo')
library(aws.s3)
credAWS <- readRDS(file = paste0(Sys.getenv("HOME"),"/credS3judo.rds"))
do.call(Sys.setenv, credAWS)
testDL <- try(save_object(object = "/portfolios/testPortfolio.Rds",
bucket = "judo-cares",
file = "temp.Rds"))
test <- readRDS("temp.Rds")
test
shiny::runApp('Documents/Github/Findthetool/apps/judo')
tempInput <- read.csv2(file = file.choose(), sep = ";")
View(tempInput)
tempInput <- read.csv2(file = file.choose(), sep = ";")
saveRDS(tempInput, "inputEuroStxx.Rds")
put_object(file = "inputEuroStxx.Rds",
object = "/inputs/inputEuroStxx.Rds",
bucket = "judo-cares")
file.remove("inputEuroStxx.Rds")
runApp('Documents/Github/Findthetool/apps/judo')
# ----- création de RDS d'input ----
tempInput <- read.csv2(file = file.choose(), sep = ";")
saveRDS(tempInput, "inputEuroStxx.Rds")
View(tempInput)
tempInput <- read.csv2(file = file.choose(), sep = ";")
saveRDS(tempInput, "inputEuroStxx.Rds")
colnames(tempInput) <- c("Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
put_object(file = "inputEuroStxx.Rds",
object = "/inputs/inputEuroStxx.Rds",
bucket = "judo-cares")
file.remove("inputEuroStxx.Rds")
runApp('Documents/Github/Findthetool/apps/judo')
tempInput <- read.csv2(file = file.choose(), sep = ";")
saveRDS(tempInput, "inputEuroStxx.Rds")
colnames(tempInput) <- c("Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
put_object(file = "inputEuroStxx.Rds",
object = "/inputs/inputEuroStxx.Rds",
bucket = "judo-cares")
file.remove("inputEuroStxx.Rds")
runApp('Documents/Github/Findthetool/apps/judo')
readRDS(file = "temp.Rds")
tempInput <- read.csv2(file = file.choose(), sep = ";")
saveRDS(tempInput, "inputEuroStxx.Rds")
colnames(tempInput) <- c("Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
put_object(file = "inputEuroStxx.Rds",
object = "/inputs/inputEuroStxx.Rds",
bucket = "judo-cares")
file.remove("inputEuroStxx.Rds")
runApp('Documents/Github/Findthetool/apps/judo')
tempInput <- read.csv2(file = file.choose(), sep = ";")
saveRDS(tempInput, "inputEuroStxx.Rds")
colnames(tempInput) <- c("Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
View(tempInput)
tempInput <- read.csv2(file = file.choose(), sep = ";")
colnames(tempInput) <- c("Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
saveRDS(tempInput, "inputEuroStxx.Rds")
put_object(file = "inputEuroStxx.Rds",
object = "/inputs/inputEuroStxx.Rds",
bucket = "judo-cares")
file.remove("inputEuroStxx.Rds")
runApp('Documents/Github/Findthetool/apps/judo')
tempInput <- read.csv2(file = file.choose(), sep = ";")
colnames(tempInput) <- c("Ticker", "Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
saveRDS(tempInput, "inputEuroStxx.Rds")
put_object(file = "inputEuroStxx.Rds",
object = "/inputs/inputEuroStxx.Rds",
bucket = "judo-cares")
file.remove("inputEuroStxx.Rds")
runApp('Documents/Github/Findthetool/apps/judo')
tempInputs[which(tempInputs$Ticker == tempResults$ticker[i]), "Capitalisation"]
as.numeric(tempInputs[which(tempInputs$Ticker == tempResults$ticker[i]), "Capitalisation"])
tempInput <- read.csv2(file = file.choose(), sep = ";")
colnames(tempInput) <- c("Ticker", "Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
tempInput
tempInput <- read.csv2(file = file.choose(), sep = ";", dec = ",")
tempInput
tempInput <- read.csv2(file = file.choose(), sep = ";", dec = ",")
colnames(tempInput) <- c("Ticker", "Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
tempInput
options(stringsAsFactors = F)
tempInput <- read.csv2(file = file.choose(), sep = ";", dec = ",")
colnames(tempInput) <- c("Ticker", "Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
tempInput
for(i in seq(2, ncol(tempInput), 1)){
tempInput[,i] <- as.numeric(gsub(" ", "", gsub(",",".", gsub("%", "", tempInput[,i]))))
}
tempInput
options(stringsAsFactors = F)
tempInput <- read.csv2(file = file.choose(), sep = ";", dec = ",")
tempInput
for(i in seq(2, ncol(tempInput), 1)){
tempInput[,i] <- as.numeric(gsub(" ", "", gsub(",",".", gsub("%", "", tempInput[,i]))))
}
colnames(tempInput) <- c("Ticker", "Capitalisation",	"LTST_debt", "Cash", "Pref_Stocks", "Minority", "Value_Adj", "Entreprise_Value",	"Liabilities",	"Pct_Stocks",	"Scope_1", "Scope_2", "Scope_3")
tempInput[,"Pct_Stocks"] <- .01 * tempInput[,"Pct_Stocks"]
saveRDS(tempInput, "inputEuroStxx.Rds")
put_object(file = "inputEuroStxx.Rds",
object = "/inputs/inputEuroStxx.Rds",
bucket = "judo-cares")
file.remove("inputEuroStxx.Rds")
runApp('Documents/Github/Findthetool/apps/judo')
HTML(kable(tempRes[,c("position", "CarbonQty")]) %>%
pieCarbon
shiny::runApp('Documents/Github/shinyExample')
file.exists("templatePDF/rmarkdownTest.rmd")
getwd()
runApp('Documents/Github/shinyExample')
